import org.eclipse.jgit.api.Git
import org.eclipse.jgit.lib.Repository

buildscript {
    repositories { mavenCentral() }
    dependencies { classpath 'org.eclipse.jgit:org.eclipse.jgit:3.2.0.201312181205-r' }
}

defaultTasks 'binaryCompatibilityTest'

def REMOTE_URL = "https://github.com/orientechnologies/orientdb.git"
def ORIENTDB_SOURCE_DIR = new File("workspace/orientdb")
def DISTRIBUITION_DIR = new File("workspace/distribution")

def TEST_DB_DIR = new File("workspace/distribution/database")
def LIB_DIR = new File("workspace/distribution/lib")

def File EXPORTED_DB_PATH = new File("workspace/distribution/db.export.gz")

def minimalVersion = "1.7"
def ArrayList<OrientDBVersion> versionsToTest = new ArrayList<OrientDBVersion>()
def ArrayList<String> versionsToSkip = new ArrayList<String>() {
    {
        add("2.2.0-beta2")
        add("2.2.0-beta")
        add("2.1-rc3")
        add("2.1-rc4")
        add("2.1-rc5")
        add("2.0-M1")
        add("2.0-M2")
        add("2.0-M3")
        add("2.0-rc1")
        add("2.0-rc2")
    }
}

/*
 * Test to ensure binary compatibility between different releases of OrientDB.
 *
 * It uses following algorithm:
 * 1. get list of tags from git repository and create list of releases which contains 2 latest minor versions.
 * so if we have releases 1.5, 1.5.1, 1.6.1, 1.6.2, 1.7, 1.7.1 we will have to test all 1.6.1, 1.6.2, 1.7, 1.7.1 releases.
 * if we have 1.5, 1.5.1, 1.6.1, 1.6.2, 1.7, 1.7.1, 2.0  we will have to test 1.7, 1.7.1, 2.0 releases and if we have 1.5, 1.5.1, 1.6.1, 1.6.2, 1.7, 1.7.1, 2.0, 2.1
 * we will test 2.0, 2.1 releases.
 * 2. Checkout first release which is going to be tested.
 * 3. run test-plocal task on this version. but do not delete test database and exported database
 * (it will contain all existing data structures in very different combinations).
 * 4. checkout next release and do db import of exported database and compare content of imported and original database.
 * 5. checkout releases and execute step 4 till all releases will be tested.
 * 6. do the same with snapshot.
 */
task binaryCompatibilityTest(dependsOn: ['runCompatibilityTestsForReleasesVersions', 'runCompatibilityTestsForSnapshot']) << {
    println "The latest SNAPSHOT version and following released versions were tested : ${versionsToTest} on binary compatibilty."
}

/*
 * Compiles and run binary compatibility test on latest snapshot version of develop branch.
 * Sources of develop branch are not compiled here. It is done in other task.
 */
task runCompatibilityTestsForSnapshot(dependsOn: ['createSnapshotDistribution']) << {
    if (versionsToTest.isEmpty())
        throw new StopExecutionException("No versions to test")

    println "Start binary compatibility test for latest snapshot"

    def File classesDir = new File("workspace/distribution/classes")
    if (classesDir.exists())
        if (!classesDir.deleteDir())
            throw new GradleScriptException("Can not delete directory ${classesDir.absolutePath}", null)


    if (!classesDir.mkdirs())
        throw new GradleScriptException("Can not create directory ${classesDir.absolutePath}", null)

    def File versionLibDir = new File("workspace/distribution/lib/SNAPSHOT")

    def classpath = ant.path {
        fileset(dir: "${versionLibDir.absolutePath}") {
            include(name: "*.jar")
        }
        pathelement(path: "${classesDir.absolutePath}")
    }

    ant.javac(destdir: "${classesDir.absolutePath}", srcdir: "src", classpath: "${classpath}", includeAntRuntime: false)

    def File newDBDir = new File("workspace/distribution/exportedDatabase")
    if (newDBDir.exists())
        if (!newDBDir.deleteDir())
            throw new GradleScriptException("Can not delete directory ${classesDir.absolutePath}", null)


    def Process process = ("${System.getProperty('java.home')}/bin/java -classpath ${classpath} " +
            "-Dindex.ignoreNullValuesDefault=true com.orientechnologies.DatabaseBinaryCompatibilityTest plocal:${TEST_DB_DIR.absolutePath} ${EXPORTED_DB_PATH.absolutePath} plocal:${newDBDir.absolutePath}").execute()
    process.consumeProcessOutput((Appendable) System.out, System.err)
    def result = process.waitFor()
    if (result != 0)
        throw new GradleScriptException("Binary compatibility test for snapshot version was failed", null)
}

/*
 * Compiles and run binary compatibility test on all released versions.
 * Sources of this versions are not compiled here. It is done in other task.
 */
task runCompatibilityTestsForReleasesVersions(dependsOn: ['createReleasedVersionsDistributions']) << {
    if (versionsToTest.isEmpty())
        throw new StopExecutionException("No versions to test")

    def File exportedDbPath = new File("workspace/distribution/db.export.gz")
    for (int i = 1; i < versionsToTest.size(); i++) {
        def OrientDBVersion version = versionsToTest.get(i)
        println "Start binary compatibility test for version ${version.tagName}"

        def File classesDir = new File("workspace/distribution/classes")
        if (classesDir.exists())
            if (!classesDir.deleteDir())
                throw new GradleScriptException("Can not delete directory ${classesDir.absolutePath}", null)


        if (!classesDir.mkdirs())
            throw new GradleScriptException("Can not create directory ${classesDir.absolutePath}", null)

        def File versionLibDir = new File("workspace/distribution/lib/${version.tagName}")

        def classpath = ant.path {
            fileset(dir: "${versionLibDir.absolutePath}") {
                include(name: "*.jar")
            }
            pathelement(path: "${classesDir.absolutePath}")
        }

        ant.javac(destdir: "${classesDir.absolutePath}", srcdir: "src", classpath: "${classpath}", includeAntRuntime: false)

        def File newDBDir = new File("workspace/distribution/exportedDatabase")
        if (newDBDir.exists())
            if (!newDBDir.deleteDir())
                throw new GradleScriptException("Can not delete directory ${classesDir.absolutePath}", null)


        def Process process = ("${System.getProperty('java.home')}/bin/java -classpath ${classpath} " +
                "-Dindex.ignoreNullValuesDefault=true com.orientechnologies.DatabaseBinaryCompatibilityTest plocal:${TEST_DB_DIR.absolutePath} ${EXPORTED_DB_PATH.absolutePath} plocal:${newDBDir.absolutePath}").execute()
        process.consumeProcessOutput((Appendable) System.out, System.err)
        def result = process.waitFor()
        if (result != 0)
            throw new GradleScriptException("Binary compatibility test for version ${version.tagName} was failed", null)
    }
}

/*
 * Create OrientDB distribution for latest version from develop branch.
 */
task createSnapshotDistribution(dependsOn: ['generateBinaryTestsDatabase']) << {
    if (versionsToTest.isEmpty())
        throw new StopExecutionException("No versions to test")

    println "Create binary distribution for latest snapshot"

    runShellScript(ORIENTDB_SOURCE_DIR, "git checkout develop")
    runShellScript(ORIENTDB_SOURCE_DIR, "git pull")
    runShellScript(ORIENTDB_SOURCE_DIR, "mvn clean package -DskipTests")

    File distributionTarget = new File(ORIENTDB_SOURCE_DIR, "distribution/target")
    def distributionDirList = distributionTarget.listFiles(new FileFilter() {
        boolean accept(File pathname) {
            return pathname.name.startsWith("orientdb-community-") && pathname.name.endsWith(".dir")
        }
    })

    if (distributionDirList == null || distributionDirList.length != 1)
        throw new GradleScriptException("Can not find distribution directory for latest snapshot", null)

    distributionDirList = distributionDirList[0].listFiles(new FileFilter() {
        boolean accept(File pathname) {
            return pathname.name.startsWith("orientdb-community-")
        }
    })

    if (distributionDirList == null || distributionDirList.length != 1)
        throw new GradleScriptException("Can not find distribution directory for latest snapshot", null)

    def File distributionLibDir = new File(distributionDirList[0], "lib")

    if (!DISTRIBUITION_DIR.exists())
        throw new GradleScriptException("Libraries directory ${distributionLibDir.absolutePath} does not exist", null)

    def File snapshotLibDir = new File(LIB_DIR, "SNAPSHOT")
    if (!snapshotLibDir.mkdirs())
        throw new GradleScriptException("Can not create directory ${snapshotLibDir.absolutePath}", null)

    ant.copy(todir: snapshotLibDir.absolutePath) {
        fileset(dir: distributionLibDir.absolutePath)
    }

    File exportedDbPath = new File("workspace/distribution/db.export.gz")
    if (!exportedDbPath.exists())
        throw new GradleScriptException("File ${exportedDbPath.absolutePath} does not exist", null)
}

/*
 * Create OrientDB distributions for all released versions.
 */
task createReleasedVersionsDistributions(dependsOn: ['generateBinaryTestsDatabase']) << {
    if (versionsToTest.isEmpty())
        throw new StopExecutionException("No versions to test")

    File libDir = new File(DISTRIBUITION_DIR, "lib")
    if (!libDir.mkdir())
        throw new GradleScriptException("Can not create directory ${libDir.absolutePath}", null)

    for (OrientDBVersion version in versionsToTest) {
        println "Create binary distribution for version ${version.tagName}"
        println "Reset the repo"
        runShellScript(ORIENTDB_SOURCE_DIR, "git reset --hard ")
        println "Create binary distribution for version ${version.tagName}"
        runShellScript(ORIENTDB_SOURCE_DIR, "git checkout tags/${version.tagName}")

        // apply CI tests patch
        runShellScript(ORIENTDB_SOURCE_DIR, "git config user.email \"jenkins@orientdb-binary-compatibility-test.com\"")
        runShellScript(ORIENTDB_SOURCE_DIR, "git config user.name \"Jenkins of Binary Compatibility\"")
        if (version.majorVersion == 2 && version.minorVersion == 2 && version.microVersion == 0 && "rc1".equals(version.qualifier))
            runShellScript(ORIENTDB_SOURCE_DIR, "git cherry-pick 5a252db3fc98fde3fb09313b4e1ac856e15c6388")

        runShellScript(ORIENTDB_SOURCE_DIR, "mvn clean package -DskipTests")

        File distributionLibDir = new File(ORIENTDB_SOURCE_DIR, "distribution/target/orientdb-community-${version.tagName}-distribution.dir/orientdb-community-${version.tagName}/lib")


        if (!distributionLibDir.exists()) {

            println "Libraries directory ${distributionLibDir.absolutePath} does not exist: try new path"

            distributionLibDir = new File(ORIENTDB_SOURCE_DIR, "distribution/target/orientdb-community-${version.tagName}.dir/orientdb-community-${version.tagName}/lib")

            if (!distributionLibDir.exists())
                throw new GradleScriptException("Libraries directory ${distributionLibDir.absolutePath} does not exist", null)
        }

        File versionLibDir = new File(libDir, "${version.tagName}")
        if (!versionLibDir.mkdir())
            throw new GradleScriptException("Can not create directory ${versionLibDir.absolutePath}", null)

        ant.copy(todir: versionLibDir.absolutePath) {
            fileset(dir: distributionLibDir.absolutePath)
        }


    }
}

/*
 * Run "ant clean test-plocal" tasks on first OrientDB release (which is chosen to be tested) to create test database which will be used
 * for binary compatibility tests.
 */
task generateBinaryTestsDatabase(dependsOn: ['cleanup', 'fetchVersionsToTest', 'cloneSourcesIfNeeded']) << {
    if (versionsToTest.isEmpty())
        throw new StopExecutionException("No versions to test")

    def version = versionsToTest.get(0)
    println "generate binary test db for ${version.tagName}"
    runShellScript(ORIENTDB_SOURCE_DIR, "git checkout ${version.tagName}")

    // patch CI tests, we are targeting only 2.1.x and 2.2.x series, 2.1.x has CI patches starting after 2.1.16 version,
    // 2.2.x has CI patches starting after 2.2.0-rc1.
    runShellScript(ORIENTDB_SOURCE_DIR, "git config user.email \"jenkins@orientdb-binary-compatibility-test.com\"")
    runShellScript(ORIENTDB_SOURCE_DIR, "git config user.name \"Jenkins of Binary Compatibility\"")
    if (version.majorVersion == 2 && version.minorVersion == 1 && version.microVersion <= 16) {
        runShellScript(ORIENTDB_SOURCE_DIR, "git cherry-pick 927b54516327cc901ee832527b69f261a9d61300")
        runShellScript(ORIENTDB_SOURCE_DIR, "git cherry-pick cb72430b67339c10bd851c0558f4e9768e287e90")
    } else if (version.majorVersion == 2 && version.minorVersion == 2 && version.microVersion == 0 &&
            "rc1".equals(version.qualifier)) {
        runShellScript(ORIENTDB_SOURCE_DIR, "git cherry-pick cb72430b67339c10bd851c0558f4e9768e287e90")
        runShellScript(ORIENTDB_SOURCE_DIR, "git cherry-pick 5a252db3fc98fde3fb09313b4e1ac856e15c6388")
    }

    println "Creating database for binary compatibility tests"

    try {
        runShellScript(ORIENTDB_SOURCE_DIR, "ant test-embedded -Dproject.target-comp=1.7 -Dproject.source-comp=1.7  -Dant.build.javac.source=1.7 -Dant.build.javac.target=1.7 -Dorientdb.test.env=ci ")

        File testDB = new File(ORIENTDB_SOURCE_DIR, "tests/target/test-db/demo")
        if (!testDB.exists()) {
            println "seem like ant build made nothing, switching to maven"
            try {
                runShellScript(ORIENTDB_SOURCE_DIR, "mvn clean install -DskipTests")
                runShellScript(ORIENTDB_SOURCE_DIR, "cd tests ; mvn clean test -Ptest-embedded -Dorientdb.test.env=ci -Dindex.ignoreNullValuesDefault=true -DexportFilePath=${EXPORTED_DB_PATH.absolutePath} ; cd ..")
            } catch (GradleScriptException e) {
                println "maven build failed, giving up"
            }
        }
    } catch (GradleScriptException e) {

        println "unable to run ant, fast forward to maven"

        runShellScript(ORIENTDB_SOURCE_DIR, "mvn clean install -DskipTests")
        runShellScript(ORIENTDB_SOURCE_DIR, "cd tests ; mvn clean test -Ptest-embedded -Dorientdb.test.env=ci -Dindex.ignoreNullValuesDefault=true -DexportFilePath=${EXPORTED_DB_PATH.absolutePath} ; cd ..")
    }

    File testDB = new File(ORIENTDB_SOURCE_DIR, "tests/target/test-db/demo")
    if (!testDB.exists())
        throw new GradleScriptException("Test database can not be found under the path ${testDB.absolutePath}", null)

    if (!TEST_DB_DIR.mkdir())
        throw new GradleScriptException("Can create directory ${TEST_DB_DIR.absolutePath}", null)

    println "Copy tests database in distribution directory ${testDB.absolutePath}"
    ant.copy(todir: TEST_DB_DIR.absolutePath) {
        fileset(dir: testDB.absolutePath)
    }

	if (!EXPORTED_DB_PATH.exists()) {
	  println "Copy exported tests database in distribution directory ${EXPORTED_DB_PATH.absolutePath}"
	  
	  File exportedDb = new File(ORIENTDB_SOURCE_DIR, "tests/target/db.export.gz");
	  if(!exportedDb.exists())
	      throw new GradleScriptException("File ${exportedDb.absolutePath} does not exist", null)

	   ant.copy(tofile: EXPORTED_DB_PATH.absolutePath) {
           fileset(file: exportedDb.absolutePath)
       }
	}
}

task cleanup << {
    File workspaceDir = new File("workspace")
    if (workspaceDir.exists()) {
        if (!workspaceDir.deleteDir()) {
            throw new GradleScriptException("Can not delete directory ${workspaceDir.absolutePath}", null)
        }
    }

    if (!workspaceDir.mkdir())
        throw new GradleScriptException("Can not create directory ${workspaceDir.absolutePath}", null)

    File releasesDir = new File("workspace/releases")
    if (releasesDir.exists())
        if (!releasesDir.deleteDir())
            throw new GradleScriptException("Can not delete directory ${releasesDir.absolutePath}", null)

    File distributionDir = new File("workspace/distribution")
    if (distributionDir.exists())
        if (!distributionDir.deleteDir())
            throw new GradleScriptException("Can not delete directory ${distributionDir.absolutePath}", null)

    println "Recreating distribution directory"

    distributionDir = new File("workspace/distribution")
    if (distributionDir.exists())
        if (!distributionDir.deleteDir())
            throw new GradleScriptException("Can not delete directory ${distributionDir.absolutePath}", null)

    if (!distributionDir.mkdirs())
        throw new GradleScriptException("Can create directory ${distributionDir.absolutePath}", null)
}

/*
 * Fetches list of tags from OrientDB repository to form list of releases to test on binary compatibility feature.
 */
task fetchVersionsToTest << {
    println "Fetch tag names from : ${REMOTE_URL} \n"

    def tags = Git.lsRemoteRepository().setTags(true)
            .setRemote(REMOTE_URL)
            .call();

    println "Fetched tags list : ${tags}\n"

    def TreeSet<OrientDBVersion> versions = new TreeSet<OrientDBVersion>(Collections.reverseOrder())
    def OrientDBVersion lowerVersion = new OrientDBVersion(minimalVersion)

    println "Creating of list of versions which will be tested on binary compatibility ..."
    for (tag in tags) {
        def shortenTagName = Repository.shortenRefName(tag.getName())
        if (isVersionTag(shortenTagName)) {
            println "${shortenTagName} is a relase tag."
            def OrientDBVersion version = new OrientDBVersion(shortenTagName)
            if (version.compareTo(lowerVersion) >= 0)
                versions.add(version)
            else
                println "Version ${shortenTagName} is skipped because it is lower than  ${lowerVersion.tagName}"

        }
    }



    def amountOfMinorVersions = 0

    def lastMinorVersion = -1
    def lastMajotVersion = -1

    for (OrientDBVersion version in versions) {
        if (version.minorVersion != lastMinorVersion || version.majorVersion != lastMajotVersion) {
            amountOfMinorVersions++;
            lastMinorVersion = version.minorVersion
            lastMajotVersion = version.majorVersion
        }
        if (amountOfMinorVersions > 2)
            break;

        if (!versionsToSkip.contains(version.tagName))
            versionsToTest.add(version)
    }

    Collections.reverse(versionsToTest)

    println "\nFollowing versions will be tested on binary compatibility ${versionsToTest.tagName}\n"
}

task cloneSourcesIfNeeded(dependsOn: 'cleanup') << {
    File srcPath = new File("workspace/orientdb")
    if (!srcPath.exists())
        runShellScript(srcPath.parentFile, "git clone ${REMOTE_URL}")
    else {
        runShellScript(ORIENTDB_SOURCE_DIR, "git checkout develop")
        runShellScript(ORIENTDB_SOURCE_DIR, "git pull")
    }

}

task pull() << {
    runShellScript(srcPath.parentFile, "git pull ${REMOTE_URL}")
}


task cloneRepo() << {
    runShellScript(srcPath.parentFile, "git clone ${REMOTE_URL}")
}

private void runShellScript(File dir, String command) {
    String[] cmd = ["sh", "-c", "cd ${dir.absolutePath} && ${command}"];
    println "command:: ${cmd}";
    Process p = Runtime.getRuntime().exec(cmd);
    p.consumeProcessOutput((Appendable) System.out, System.err)
    int res = p.waitFor()
    if (res != 0)
        throw new GradleScriptException("Error during execution of command ${cmd}", null)

}

private boolean isVersionTag(tagName) {
    if (tagName.isInteger())
        return true

    def qualifierIndex = tagName.indexOf('-')

    def firstIndex = tagName.indexOf('.')
    if (firstIndex <= 0)
        return false;

    def firsIndexPart = tagName.substring(0, firstIndex)
    if (!firsIndexPart.isInteger())
        return false

    def secondIndex = tagName.indexOf('.', firstIndex + 1);
    def secondIndexPart = null

    if (secondIndex > 0)
        secondIndexPart = tagName.substring(firstIndex + 1, secondIndex)
    else if (qualifierIndex > 0)
        secondIndexPart = tagName.substring(firstIndex + 1, qualifierIndex)
    else
        secondIndexPart = tagName.substring(firstIndex + 1)

    if (!secondIndexPart.isInteger())
        return false

    if (secondIndex < 0)
        return true

    def thirdIndexPart = null
    if (qualifierIndex > 0)
        thirdIndexPart = tagName.substring(secondIndex + 1, qualifierIndex)
    else
        thirdIndexPart = tagName.substring(secondIndex + 1)

    if (thirdIndexPart.isInteger())
        return true

    return false
}

final class OrientDBVersion implements Comparable<OrientDBVersion> {
    final int majorVersion;
    final int minorVersion;
    final int microVersion;
    final String qualifier;

    final String tagName;


    OrientDBVersion(tagName) {
        this.tagName = tagName

        def qualifierIndex = tagName.indexOf('-')
        if (qualifierIndex > 0) {
            qualifier = tagName.substring(qualifierIndex + 1)
            tagName = tagName.substring(0, qualifierIndex)
        } else
            qualifier = ""


        def firstIndex = tagName.indexOf('.')

        if (firstIndex < 0) {
            majorVersion = tagName.toInteger()
            minorVersion = 0
            microVersion = 0
        } else {
            def secondIndex = tagName.indexOf('.', firstIndex + 1)

            if (secondIndex < 0) {
                majorVersion = tagName.substring(0, firstIndex).toInteger()
                minorVersion = tagName.substring(firstIndex + 1).toInteger()
                microVersion = 0
            } else {
                majorVersion = tagName.substring(0, firstIndex).toInteger()
                minorVersion = tagName.substring(firstIndex + 1, secondIndex).toInteger()
                microVersion = tagName.substring(secondIndex + 1).toInteger()
            }
        }
    }


    int compareTo(OrientDBVersion o) {
        if (majorVersion > o.majorVersion)
            return 1
        else if (majorVersion < o.majorVersion)
            return -1

        if (minorVersion > o.minorVersion)
            return 1
        else if (minorVersion < o.minorVersion)
            return -1

        if (microVersion > o.microVersion)
            return 1
        else if (microVersion < o.microVersion)
            return -1

        if (qualifier == null && o.qualifier != null && !o.qualifier.isEmpty())
            return 1;

        if (qualifier.isEmpty() && o.qualifier != null && !o.qualifier.isEmpty())
            return 1;

        if (qualifier != null && !qualifier.isEmpty() && (o.qualifier == null || o.qualifier.isEmpty()))
            return -1;

        return qualifier.compareTo(o.qualifier)
    }

    boolean equals(o) {
        if (this.is(o)) return true
        if (getClass() != o.class) return false

        OrientDBVersion that = (OrientDBVersion) o

        if (majorVersion != that.majorVersion) return false
        if (microVersion != that.microVersion) return false
        if (minorVersion != that.minorVersion) return false
        if (qualifier != that.qualifier) return false

        return true
    }

    int hashCode() {
        int result
        result = majorVersion
        result = 31 * result + minorVersion
        result = 31 * result + microVersion
        result = 31 * result + (qualifier != null ? qualifier.hashCode() : 0)
        return result
    }

    @Override
    public java.lang.String toString() {
        return "OrientDBVersion{" + majorVersion +
                '.' + minorVersion +
                '.' + microVersion +
                '-' + qualifier + " }";
    }
}
